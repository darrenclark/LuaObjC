static int fc_v_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	((void(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	return 0;
}

static int fc_v_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	((void(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	((void(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	((void(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	((void(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	((void(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	((void(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	((void(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	((void(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	((void(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	((void(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	((void(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	((void(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	((void(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	((void(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	((void(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	return 0;
}

static int fc_v_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	((void(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	((void(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	((void(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_v_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	((void(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	return 0;
}

static int fc_c_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	char ret = ((char(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	char ret = ((char(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	char ret = ((char(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	char ret = ((char(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	char ret = ((char(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	char ret = ((char(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	char ret = ((char(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	char ret = ((char(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_c_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	char ret = ((char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	if (ret == NO || ret == YES) {
		lua_pushboolean(L, ret);
	} else {
		lua_pushnumber(L, ret);
	}

	return 1;
}

static int fc_i_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	int ret = ((int(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	int ret = ((int(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	int ret = ((int(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	int ret = ((int(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	int ret = ((int(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	int ret = ((int(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	int ret = ((int(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	int ret = ((int(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_i_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	int ret = ((int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	short ret = ((short(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	short ret = ((short(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	short ret = ((short(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	short ret = ((short(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	short ret = ((short(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	short ret = ((short(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	short ret = ((short(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	short ret = ((short(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_s_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	short ret = ((short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	long ret = ((long(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	long ret = ((long(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	long ret = ((long(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	long ret = ((long(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	long ret = ((long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	long ret = ((long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long ret = ((long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long ret = ((long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_l_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long ret = ((long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	long long ret = ((long long(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	long long ret = ((long long(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	long long ret = ((long long(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	long long ret = ((long long(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	long long ret = ((long long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	long long ret = ((long long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	long long ret = ((long long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	long long ret = ((long long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_q_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	long long ret = ((long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	unsigned char ret = ((unsigned char(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	unsigned char ret = ((unsigned char(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned char ret = ((unsigned char(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned char ret = ((unsigned char(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_C_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned char ret = ((unsigned char(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	unsigned int ret = ((unsigned int(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	unsigned int ret = ((unsigned int(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned int ret = ((unsigned int(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned int ret = ((unsigned int(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_I_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned int ret = ((unsigned int(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	unsigned short ret = ((unsigned short(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	unsigned short ret = ((unsigned short(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned short ret = ((unsigned short(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned short ret = ((unsigned short(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_S_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned short ret = ((unsigned short(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	unsigned long ret = ((unsigned long(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	unsigned long ret = ((unsigned long(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long ret = ((unsigned long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long ret = ((unsigned long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_L_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long ret = ((unsigned long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	unsigned long long ret = ((unsigned long long(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_Q_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	unsigned long long ret = ((unsigned long long(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	float ret = ((float(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	float ret = ((float(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	float ret = ((float(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	float ret = ((float(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	float ret = ((float(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	float ret = ((float(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	float ret = ((float(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	float ret = ((float(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_f_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	float ret = ((float(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	double ret = ((double(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	double ret = ((double(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	double ret = ((double(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	double ret = ((double(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	double ret = ((double(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	double ret = ((double(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	double ret = ((double(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	double ret = ((double(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_d_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	double ret = ((double(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushnumber(L, ret);
	return 1;
}

static int fc_B_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	_Bool ret = ((_Bool(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	_Bool ret = ((_Bool(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	_Bool ret = ((_Bool(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	_Bool ret = ((_Bool(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	_Bool ret = ((_Bool(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	_Bool ret = ((_Bool(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_B_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	_Bool ret = ((_Bool(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	lua_pushboolean(L, ret);
	return 1;
}

static int fc_A_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	id ret = ((id(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	id ret = ((id(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	id ret = ((id(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	id ret = ((id(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	id ret = ((id(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_A_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));

	id ret = ((id(*)(id, SEL))objc_msgSend)(m_info->target, m_info->selector);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_c(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}


	id ret = ((id(*)(id, SEL, char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_cH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	char arg2;
	if (lua_isboolean(L, 2)) {
		arg2 = lua_toboolean(L, 2);
	} else {
		arg2 = luaL_checknumber(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_i(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_if(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_iH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	int arg2 = (int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_s(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_sH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	short arg2 = (short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_l(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_lH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long arg2 = (long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_qH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	long long arg2 = (long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_C(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ci(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Cd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned char, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned char, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_CH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned char arg2 = (unsigned char)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned char, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_I(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ic(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ii(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Is(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Il(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Iq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_II(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_If(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Id(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned int, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned int, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_IH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned int arg2 = (unsigned int)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned int, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_S(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Sc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Si(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ss(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Sl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Sq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Sf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Sd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned short, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned short, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_SH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned short arg2 = (unsigned short)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned short, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_L(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Lc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Li(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ls(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ll(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Lq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Lf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ld(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_LH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long arg2 = (unsigned long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Q(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ql(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Qd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, unsigned long long, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, unsigned long long, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_QH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	unsigned long long arg2 = (unsigned long long)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, unsigned long long, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_f(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, float))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ff(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, float, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, float, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_fH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	float arg2 = (float)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, float, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_d(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);

	id ret = ((id(*)(id, SEL, double))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_di(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_ds(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_df(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, double, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, double, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_dH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	double arg2 = (double)luaL_checknumber(L, 2);
	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, double, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_B(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);


	id ret = ((id(*)(id, SEL, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Bd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, _Bool, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, _Bool, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_BH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	luaL_argcheck(L, lua_isboolean(L, 2), 2, "`boolean' expected");
	_Bool arg2 = lua_toboolean(L, 2);

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, _Bool, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_A(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	id ret = ((id(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ac(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ai(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_As(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Al(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Aq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Af(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Ad(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_AH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_H(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}


	id ret = ((id(*)(id, SEL, id))objc_msgSend)(m_info->target, m_info->selector, arg2);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hc(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	char arg3;
	if (lua_isboolean(L, 3)) {
		arg3 = lua_toboolean(L, 3);
	} else {
		arg3 = luaL_checknumber(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hi(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	int arg3 = (int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hs(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	short arg3 = (short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hl(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long arg3 = (long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hq(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	long long arg3 = (long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HC(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned char arg3 = (unsigned char)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned char))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HI(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned int arg3 = (unsigned int)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned int))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HS(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned short arg3 = (unsigned short)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned short))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HL(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long arg3 = (unsigned long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HQ(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	unsigned long long arg3 = (unsigned long long)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, unsigned long long))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hf(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	float arg3 = (float)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, float))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_Hd(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	double arg3 = (double)luaL_checknumber(L, 3);

	id ret = ((id(*)(id, SEL, id, double))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HB(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	luaL_argcheck(L, lua_isboolean(L, 3), 3, "`boolean' expected");
	_Bool arg3 = lua_toboolean(L, 3);


	id ret = ((id(*)(id, SEL, id, _Bool))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HA(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

static int fc_H_HH(lua_State *L) {
	method_info *m_info = (method_info *)lua_touserdata(L, lua_upvalueindex(1));
	id arg2 = nil;
	if (lua_isnumber(L, 2)) {
		double val = lua_tonumber(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg2 autorelease];
	} else if (lua_isboolean(L, 2)) {
		int val = lua_toboolean(L, 2);
		arg2 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg2 autorelease];
	} else if (lua_isstring(L, 2)) {
		const char *str = lua_tolstring(L, 2, NULL);
		arg2 = [NSString stringWithUTF8String:str];
	} else {
		arg2 = luaobjc_object_check_or_nil(L, 2);
	}

	id arg3 = nil;
	if (lua_isnumber(L, 3)) {
		double val = lua_tonumber(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &val);
		[arg3 autorelease];
	} else if (lua_isboolean(L, 3)) {
		int val = lua_toboolean(L, 3);
		arg3 = (NSNumber *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &val);
		[arg3 autorelease];
	} else if (lua_isstring(L, 3)) {
		const char *str = lua_tolstring(L, 3, NULL);
		arg3 = [NSString stringWithUTF8String:str];
	} else {
		arg3 = luaobjc_object_check_or_nil(L, 3);
	}


	id ret = ((id(*)(id, SEL, id, id))objc_msgSend)(m_info->target, m_info->selector, arg2, arg3);
	luaobjc_object_push(L, ret);
	return 1;
}

